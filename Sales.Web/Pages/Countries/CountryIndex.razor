@page "/countries";
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertServie

<h3>Paises</h3>

<a class="btn btn-primary mb-3" href="/countries/create">Nuevo País</a>

<Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync" />

<GenericList MyList="Countries">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>País</th>
                    <th style="width:220px">Estados / Departamentos</th>
                    <th style="width:260px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.StatesNumber
                        </td>
                        <td>
                            <a class="btn btn-info" href="/countries/details/@country.Id">Detalle</a>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>

</GenericList>



@code {
    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    public int totalPages;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        try
        {
            //var responseHttp = await repository.Get<List<Country>>("/api/countries");
            //Countries = responseHttp.Response;
            string url1 = $"/api/countries?page={page}";
            string url2 = $"/api/countries/totalPages";

            var responseHttp = await repository.Get<List<Country>>(url1);
            var responseHttp2 = await repository.Get<int>(url2);
            Countries = responseHttp.Response!;

            var error = responseHttp.HttpResponseMessage.ToString();
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertServie.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            totalPages = responseHttp2.Response!;
        }
        catch (Exception ex)
        {

        }

    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertServie.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Desea eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/countries/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertServie.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}

